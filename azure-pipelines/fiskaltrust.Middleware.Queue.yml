resources:
- repo: self

trigger:
  batch: true
  branches:
    include:
    - master
    - refs/tags/queue/*
  paths:
    include:
      - queue

pr: none

variables:
- group: 'Code Signing Certificates'
- name: BuildConfiguration
  value: release
- name: Solution
  value: 'fiskaltrust.Middleware.sln'
- name: WorkingDirectory
  value: 'queue'
- name: vmImageName 
  value: 'windows-2022'

jobs:  
- job: Test
  displayName: Unit and integration tests
  pool:
    vmImage: $(vmImageName)
  steps:
  - script: |
      dotnet tool install --tool-path tools dotnet-reportgenerator-globaltool
    displayName: Install report generator
    workingDirectory: '/'

  - powershell: |   
      $nugetFeed = if ($Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/release/") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/master") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/tags")) { "release" } else { "dev" }
      Write-Host "##vso[task.setvariable variable=NuGetFeed;]$nugetFeed"
    displayName: Set NuGet feed

  - task: Cache@2
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/*.csproj'
      restoreKeys: |
        nuget | "$(Agent.OS)"
        nuget
      path: $(Pipeline.Workspace)/.nuget/packages
    displayName: Cache NuGet packages

  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '$(WorkingDirectory)/$(Solution)'
      feedsToUse: 'select'
      vstsFeed: '$(NuGetFeed)'
    displayName: 'Restore'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: '$(WorkingDirectory)/$(Solution)'
      arguments: '--configuration $(BuildConfiguration) --no-restore'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'test'
      projects: '$(WorkingDirectory)/**/*.UnitTest.csproj'
      arguments: '--configuration $(BuildConfiguration) --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Include=[fiskaltrust.*]*'
      nobuild: true
    displayName: 'Run unit tests'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'test'
      projects: '$(WorkingDirectory)/**/*.IntegrationTest.csproj'
      arguments: '--configuration $(BuildConfiguration) --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Include=[fiskaltrust.*]*'
      nobuild: true
    displayName: 'Run integration tests'

  - script: |
      /tools/reportgenerator -reports:$(Build.SourcesDirectory)/$(WorkingDirectory)/test/**/*.opencover.xml -targetdir:$(Build.SourcesDirectory)/$(WorkingDirectory)/CodeCoverage -reporttypes:"Cobertura;HTMLInline;HTMLChart"
    displayName: Create Code coverage report
    workingDirectory: '/'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/$(WorkingDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/$(WorkingDirectory)/CodeCoverage'


- job: AcceptanceTest
  dependsOn: Test
  displayName: Acceptance tests
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/tags/queue/')))
  pool:
    vmImage: $(vmImageName)
  strategy:
    maxParallel: 4
    matrix: 
      EFQueue:
        Project: 'fiskaltrust.Middleware.Storage.EF.AcceptanceTest'
      EFCoreQueue:
        Project: 'fiskaltrust.Middleware.Storage.EFCore.AcceptanceTest'
      SQLiteQueue:
        Project: 'fiskaltrust.Middleware.Storage.SQLite.AcceptanceTest'
      MySQLQueue:
        Project: 'fiskaltrust.Middleware.Storage.MySQL.AcceptanceTest'
      InMemoryQueue:
        Project: 'fiskaltrust.Middleware.Storage.InMemory.AcceptanceTest'
      QueueSynchronizer:
        Project: 'fiskaltrust.Middleware.QueueSynchronizer.AcceptanceTest'
      Queue:
        Project: 'fiskaltrust.Middleware.Queue.AcceptanceTest'
        
  steps:
  - script: |
      dotnet tool install --tool-path tools dotnet-reportgenerator-globaltool
    displayName: Install report generator
    workingDirectory: '/'
  - powershell: |   
      $nugetFeed = if ($Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/release/") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/master") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/tags")) { "release" } else { "dev" }
      Write-Host "##vso[task.setvariable variable=NuGetFeed;]$nugetFeed"
    displayName: Set NuGet feed

  - task: Cache@2
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/*.csproj'
      restoreKeys: |
        nuget | "$(Agent.OS)"
        nuget
      path: $(Pipeline.Workspace)/.nuget/packages
    displayName: Cache NuGet packages
    
  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '$(WorkingDirectory)/$(Solution)'
      feedsToUse: 'select'
      vstsFeed: '$(NuGetFeed)'
    displayName: 'Restore'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: '$(WorkingDirectory)/$(Solution)'
      arguments: '--configuration $(BuildConfiguration) --no-restore'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'test'
      projects: |
        $(WorkingDirectory)/**/$(Project).csproj
      arguments: '--configuration $(BuildConfiguration) --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Include=[fiskaltrust.*]*'
      nobuild: true
    displayName: 'Run acceptance tests'
  
  - script: |
      /tools/reportgenerator -reports:$(Build.SourcesDirectory)/$(WorkingDirectory)/test/**/*.opencover.xml -targetdir:$(Build.SourcesDirectory)/$(WorkingDirectory)/CodeCoverage -reporttypes:"Cobertura;HTMLInline;HTMLChart"
    displayName: Create Code coverage report
    workingDirectory: '/'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/$(WorkingDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/$(WorkingDirectory)/CodeCoverage'        


- job: BuildNugetPackages
  displayName: Build v1 NuGet packages
  dependsOn: 
  - Test
  - AcceptanceTest
  condition: and(eq(dependencies.Test.result, 'Succeeded'), in(dependencies.AcceptanceTest.result, 'Succeeded', 'Skipped'))
  pool:
    vmImage: $(vmImageName)
  steps:
  - task: yavt@1 
    inputs:
      mode: 'Multi'
      updateNuspecFiles: true
      updateBuildNumber: false
      semverVersion: 'v1'

  - powershell: |   
      $nugetFeed = if ($Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/release/") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/master") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/tags")) { "release" } else { "dev" }
      Write-Host "##vso[task.setvariable variable=NuGetFeed;]$nugetFeed"
    displayName: Set NuGet feed
    
  - task: Cache@2
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/*.csproj'
      restoreKeys: |
        nuget | "$(Agent.OS)"
        nuget
      path: $(Pipeline.Workspace)/.nuget/packages
    displayName: Cache NuGet packages

  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '$(WorkingDirectory)/$(Solution)'
      feedsToUse: 'select'
      vstsFeed: '$(NuGetFeed)'
    displayName: 'Restore'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: '$(WorkingDirectory)/$(Solution)'
      arguments: '--configuration $(BuildConfiguration) --no-restore'

  - script: |
      dotnet publish --configuration $(buildConfiguration) -f net461
      dotnet publish --configuration $(buildConfiguration) -f netstandard2.0
      dotnet publish --configuration $(buildConfiguration) -f netstandard2.1
    displayName: 'dotnet publish fiskaltrust.Middleware.Queue.SQLite'
    workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.SQLite'

  - task: codesigning@2
    displayName: 'Code Signing'
    inputs:
      secureFileId: 'codesigning.pfx'
      signCertPassword: '$(Code_Signing_Password)'
      filePaths: |
        $(WorkingDirectory)/src/**/*.dll
        $(WorkingDirectory)/src/**/*fiskaltrust*.exe

  - script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration)
    displayName: 'dotnet pack fiskaltrust.Middleware.Queue.InMemory'
    workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.InMemory'

  - script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration) /p:NuspecFile=.nuspec
    displayName: 'dotnet pack fiskaltrust.Middleware.Queue.SQLite'
    workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.SQLite'

  - script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration)
    displayName: 'dotnet pack fiskaltrust.Middleware.Queue.EF'
    workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.EF'
    
  - script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration)
    displayName: 'dotnet pack fiskaltrust.Middleware.Queue.PostgreSQL'
    workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.PostgreSQL'

  - script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration)
    displayName: 'dotnet pack fiskaltrust.Middleware.Abstractions'
    workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Abstractions'
    
  - script: dotnet pack --output $(Build.ArtifactStagingDirectory) --no-restore --configuration $(buildConfiguration)
    displayName: 'dotnet pack fiskaltrust.Middleware.Queue.MySQL'
    workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.MySQL'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      pathToPublish: '$(build.artifactstagingdirectory)'
      artifactName: packages-v1


- job: BuildZipPackages
  displayName: Build v2 zip packages
  dependsOn: 
  - Test
  - AcceptanceTest
  condition: and(eq(dependencies.Test.result, 'Succeeded'), in(dependencies.AcceptanceTest.result, 'Succeeded', 'Skipped'))
  pool:
    vmImage: $(vmImageName)
  steps:
  - task: yavt@1 
    inputs:
      mode: 'Multi'
      updateNuspecFiles: true
      updateBuildNumber: false
      semverVersion: 'v1'

  - powershell: |   
      $nugetFeed = if ($Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/release/") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/heads/master") -or $Env:BUILD_SOURCEBRANCH.StartsWith("refs/tags")) { "release" } else { "dev" }
      Write-Host "##vso[task.setvariable variable=NuGetFeed;]$nugetFeed"
    displayName: Set NuGet feed

  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '$(WorkingDirectory)/$(Solution)'
      feedsToUse: 'select'
      vstsFeed: '$(NuGetFeed)'
    displayName: 'Restore'
    
  - task: Cache@2
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/*.csproj'
      restoreKeys: |
        nuget | "$(Agent.OS)"
        nuget
      path: $(Pipeline.Workspace)/.nuget/packages
    displayName: Cache NuGet packages

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: '$(WorkingDirectory)/$(Solution)'
      arguments: '--configuration $(BuildConfiguration) --no-restore'

  - task: codesigning@2
    displayName: 'Code Signing'
    inputs:
      secureFileId: 'codesigning.pfx'
      signCertPassword: '$(Code_Signing_Password)'
      filePaths: |
        $(WorkingDirectory)/src/**/*fiskaltrust*.dll
        $(WorkingDirectory)/src/**/*fiskaltrust*.exe

  - script: |
      $packageName = "fiskaltrust.Middleware.Queue.InMemory"
      $version = ((Get-Content "version.json" -Raw) | ConvertFrom-Json).version
      dotnet publish --configuration $(buildConfiguration) -f net6 --output $(Build.ArtifactStagingDirectory)/raw/$packageName --no-build /p:DebugType=None /p:DebugSymbols=false
      Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw/$packageName/* -DestinationPath $(Build.ArtifactStagingDirectory)/packages/$packageName$version.zip
    displayName: 'Publish fiskaltrust.Middleware.Queue.InMemory'
    workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.InMemory'

  - script: |
      $packageName = "fiskaltrust.Middleware.Queue.SQLite"
      $version = ((Get-Content "version.json" -Raw) | ConvertFrom-Json).version
      dotnet publish --configuration $(buildConfiguration) -f net6 --output $(Build.ArtifactStagingDirectory)/raw/$packageName --no-build /p:DebugType=None /p:DebugSymbols=false
      Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw/$packageName/* -DestinationPath $(Build.ArtifactStagingDirectory)/packages/$packageName$version.zip
    displayName: 'Publish fiskaltrust.Middleware.Queue.SQLite'
    workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.SQLite'

  - script: |
      $packageName = "fiskaltrust.Middleware.Queue.PostgreSQL"
      $version = ((Get-Content "version.json" -Raw) | ConvertFrom-Json).version
      dotnet publish --configuration $(buildConfiguration) -f net6 --output $(Build.ArtifactStagingDirectory)/raw/$packageName --no-build /p:DebugType=None /p:DebugSymbols=false
      Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw/$packageName/* -DestinationPath $(Build.ArtifactStagingDirectory)/packages/$packageName$version.zip
    displayName: 'Publish fiskaltrust.Middleware.Queue.PostgreSQL'
    workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.PostgreSQL'

  - script: |
      $packageName = "fiskaltrust.Middleware.Queue.MySQL"
      $version = ((Get-Content "version.json" -Raw) | ConvertFrom-Json).version
      dotnet publish --configuration $(buildConfiguration) -f net6 --output $(Build.ArtifactStagingDirectory)/raw/$packageName --no-build /p:DebugType=None /p:DebugSymbols=false
      Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw/$packageName/* -DestinationPath $(Build.ArtifactStagingDirectory)/packages/$packageName$version.zip
    displayName: 'Publish fiskaltrust.Middleware.Queue.MySQL'
    workingDirectory: '$(WorkingDirectory)/src/fiskaltrust.Middleware.Queue.MySQL'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: packages'
    inputs:
      pathToPublish: '$(build.artifactstagingdirectory)/packages'
      artifactName: packages-v2
